{"version":3,"sources":["utils/fetchClient.ts","types/Status.ts","api/todos.ts","api/users.ts","components/Auth/AuthForm.tsx","components/Auth/AuthContext.tsx","components/ErrorNotification.tsx","components/TodoFilter.tsx","components/Footer.tsx","components/Header.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","method","data","options","body","JSON","stringify","headers","fetch","then","response","ok","Error","json","Status","client","updateTodo","todoId","getUserByEmail","email","a","users","AuthForm","onLogin","useState","setEmail","name","setName","needToRegister","setNeedToRegister","errorMessage","setErrorMessage","saveUser","user","localStorage","setItem","useEffect","userData","getItem","parse","registerUser","createUser","catch","onSubmit","event","preventDefault","className","htmlFor","type","id","placeholder","value","required","onChange","e","target","minLength","AuthContext","React","createContext","AuthProvider","children","setUser","Provider","ErrorNotification","errorText","classNames","TodoFilter","match","useMatch","to","selected","params","filterOption","Active","Completed","Footer","numberOfActiveTodos","numberOfCompletedTodos","todos","deleteTodo","data-cy","onClick","Promise","all","filter","todo","completed","map","Header","addTodo","addErrorMessage","setErrorText","useContext","newTodoField","useRef","query","setQuery","current","focus","title","userId","trim","finally","ref","TodoItem","updateTodoData","isEditingTodo","setIsEditingTodo","newTitle","setNewTitle","renameTodo","editing","checked","onDoubleClick","onBlur","onKeyUp","key","TodoList","useParams","All","filteredTodos","App","todosFromLocalStorage","initialTodos","setTodos","text","setTimeout","removeTodo","currentTodos","length","isAllCompleted","useMemo","todoItem","path","index","element","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.bdd884d7.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const createTodo = (title: string, userId: number) => {\n  return client.post<Todo>('/todos', {\n    userId,\n    title,\n    completed: false,\n  });\n};\n\nexport const removeTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const updateTodo = (todoId: number, data: object) => {\n  return client.patch<Todo>(`/todos/${todoId}`, data);\n};\n","import { User, UserData } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\nexport const createUser = ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n","import React, { useEffect, useState } from 'react';\nimport { createUser, getUserByEmail } from '../../api/users';\nimport { User } from '../../types/User';\n\nexport type Props = {\n  onLogin: (user: User) => void,\n};\n\nexport const AuthForm: React.FC<Props> = ({ onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [needToRegister, setNeedToRegister] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const saveUser = (user: User) => {\n    localStorage.setItem('user', JSON.stringify(user));\n    onLogin(user);\n  };\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n\n    if (!userData) {\n      return;\n    }\n\n    const user = JSON.parse(userData) as User;\n\n    onLogin(user);\n  }, []);\n\n  const loadUser = () => {\n    getUserByEmail(email)\n      .then(user => {\n        if (user) {\n          saveUser(user);\n        } else {\n          setNeedToRegister(true);\n        }\n      })\n      .catch(() => setErrorMessage('Something went wrong'));\n  };\n\n  const registerUser = () => {\n    return createUser({ name, email })\n      .then(saveUser)\n      .catch(() => setErrorMessage('Something went wrong'));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrorMessage('');\n\n    if (needToRegister) {\n      registerUser();\n    } else {\n      loadUser();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form\">\n      <h1 className=\"title\">\n        {needToRegister ? 'You need to register' : 'Log in to open todos'}\n      </h1>\n\n      <label className=\"label\" htmlFor=\"user-email\">\n        Email\n      </label>\n\n      <div>\n        <input\n          type=\"email\"\n          id=\"user-email\"\n          className=\"input\"\n          placeholder=\"Enter your email\"\n          value={email}\n          required\n          onChange={e => setEmail(e.target.value)}\n        />\n      </div>\n\n      {!needToRegister && errorMessage && (\n        <p className=\"error-message\">{errorMessage}</p>\n      )}\n\n      {needToRegister && (\n        <div>\n          <label className=\"label\" htmlFor=\"user-name\">\n            Your Name\n          </label>\n\n          <div>\n            <input\n              type=\"text\"\n              id=\"user-name\"\n              className=\"input\"\n              placeholder=\"Enter your name\"\n              required\n              minLength={4}\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n          </div>\n\n          {needToRegister && errorMessage && (\n            <p className=\"error-message\">{errorMessage}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"button-wrapper\">\n        <button\n          type=\"submit\"\n          className=\"form-button\"\n        >\n          {needToRegister ? 'Register' : 'Login'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { AuthForm } from './AuthForm';\n\nexport const AuthContext = React.createContext<User | null>(null);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AuthProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!user) {\n    return <AuthForm onLogin={setUser} />;\n  }\n\n  return (\n    <AuthContext.Provider value={user}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  errorText: string,\n};\n\nexport const ErrorNotification: React.FC<Props> = ({ errorText }) => (\n  <div\n    className={classNames(\n      'notification',\n      { 'notification-hidden': !errorText },\n    )}\n  >\n    {errorText}\n  </div>\n);\n","import React from 'react';\nimport { Link, useMatch } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Status } from '../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const match = useMatch('/:filterOption');\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <Link\n          to=\"../\"\n          className={classNames({\n            selected: !match?.params.filterOption,\n          })}\n        >\n          All\n        </Link>\n      </li>\n\n      <li>\n        <Link\n          to=\"../active\"\n          className={classNames({\n            selected: match?.params.filterOption === Status.Active,\n          })}\n        >\n          Active\n        </Link>\n      </li>\n\n      <li>\n        <Link\n          to=\"../completed\"\n          className={classNames({\n            selected: match?.params.filterOption === Status.Completed,\n          })}\n        >\n          Completed\n        </Link>\n      </li>\n    </ul>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoFilter } from './TodoFilter';\n\ntype Props = {\n  numberOfActiveTodos: number,\n  numberOfCompletedTodos: number,\n  todos: Todo[],\n  deleteTodo: (todoId: number) => void,\n};\n\nexport const Footer: React.FC<Props> = ({\n  numberOfActiveTodos,\n  numberOfCompletedTodos,\n  todos,\n  deleteTodo,\n}) => {\n  const clearCompleted = () => {\n    Promise.all(todos.filter(todo => todo.completed)\n      .map(todo => deleteTodo(todo.id)));\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${numberOfActiveTodos} items left`}\n      </span>\n\n      <TodoFilter />\n\n      {!!numberOfCompletedTodos && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n","import React, {\n  useState, useContext, useRef, useEffect,\n} from 'react';\nimport { createTodo } from '../api/todos';\nimport { Todo } from '../types/Todo';\nimport { AuthContext } from './Auth/AuthContext';\n\ntype Props = {\n  addTodo: (todo: Todo) => void,\n  addErrorMessage: (text: string) => void,\n  setErrorText: React.Dispatch<React.SetStateAction<string>>,\n};\n\nexport const Header: React.FC<Props> = ({\n  addTodo,\n  addErrorMessage,\n  setErrorText,\n}) => {\n  const user = useContext(AuthContext);\n  const newTodoField = useRef<HTMLInputElement>(null);\n\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, []);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!query.trim()) {\n      addErrorMessage(\"Title can't be empty\");\n\n      return;\n    }\n\n    if (query.trim() && user) {\n      setErrorText('');\n\n      createTodo(query, user.id)\n        .then(todo => {\n          addTodo({\n            ...todo,\n          });\n        })\n        .catch(() => {\n          addErrorMessage('Unable to add a todo');\n        })\n        .finally(() => {\n          setQuery('');\n        });\n    }\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          data-cy=\"createTodo\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          ref={newTodoField}\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n      </form>\n    </header>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  deleteTodo: (todoId: number) => void,\n  updateTodoData: (todoId: number, data: object) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  deleteTodo,\n  updateTodoData,\n}) => {\n  const newTodoField = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  });\n\n  const [isEditingTodo, setIsEditingTodo] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const handleChangeStatus = () => {\n    updateTodoData(todo.id, { completed: !todo.completed });\n  };\n\n  const renameTodo = () => {\n    setIsEditingTodo(false);\n\n    if (newTitle.trim() === todo.title) {\n      return;\n    }\n\n    if (!newTitle.trim()) {\n      deleteTodo(todo.id);\n\n      return;\n    }\n\n    updateTodoData(todo.id, { title: newTitle });\n  };\n\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setIsEditingTodo(false);\n      setNewTitle(todo.title);\n    }\n\n    if (event.key === 'Enter') {\n      renameTodo();\n    }\n  };\n\n  const handleBlur = () => {\n    renameTodo();\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed,\n        editing: isEditingTodo,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id=\"toggle-view\"\n          checked={todo.completed}\n          onChange={handleChangeStatus}\n        />\n        <label onDoubleClick={() => setIsEditingTodo(true)}>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        placeholder=\"Empty todo will be deleted\"\n        ref={newTodoField}\n        value={newTitle}\n        onChange={handleChangeTitle}\n        onBlur={handleBlur}\n        onKeyUp={handleKeyUp}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  deleteTodo: (todoId: number) => void,\n  updateTodoData: (todoId: number, data: object) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  deleteTodo,\n  updateTodoData,\n}) => {\n  const { filterOption = Status.All } = useParams();\n\n  const filteredTodos = todos.filter(todo => {\n    switch (filterOption) {\n      case Status.Active:\n        return !todo.completed;\n\n      case Status.Completed:\n        return todo.completed;\n\n      default:\n        return todos;\n    }\n  });\n\n  return (\n    <ul className=\"todo-list\" data-cy=\"todoList\">\n      {filteredTodos.map(todo => (\n        <TodoItem\n          todo={todo}\n          key={todo.id}\n          deleteTodo={deleteTodo}\n          updateTodoData={updateTodoData}\n        />\n      ))}\n    </ul>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, {\n  useEffect, useState, useContext, useMemo,\n} from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { getTodos, removeTodo, updateTodo } from './api/todos';\nimport { AuthContext } from './components/Auth/AuthContext';\nimport { ErrorNotification } from './components/ErrorNotification';\nimport { Footer } from './components/Footer';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\n\nconst App: React.FC = () => {\n  const user = useContext(AuthContext);\n\n  const todosFromLocalStorage = localStorage.getItem('todos');\n  const initialTodos = todosFromLocalStorage\n    ? JSON.parse(todosFromLocalStorage)\n    : [];\n\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n  const [errorText, setErrorText] = useState('');\n\n  const addErrorMessage = (text: string) => {\n    setErrorText(text);\n    setTimeout(() => setErrorText(''), 3000);\n  };\n\n  useEffect(() => {\n    if (user) {\n      getTodos(user.id)\n        .then(setTodos);\n    }\n  }, []);\n\n  const addTodo = (todo: Todo) => {\n    setTodos((currentTodos: Todo[]) => [\n      ...currentTodos,\n      todo,\n    ]);\n  };\n\n  const deleteTodo = (todoId: number) => {\n    removeTodo(todoId)\n      .then(() => {\n        setTodos((currentTodos) => {\n          return currentTodos.filter(todo => todo.id !== todoId);\n        });\n      })\n      .catch(() => {\n        addErrorMessage('Unable to delete a todo');\n      });\n  };\n\n  const updateTodoData = (todoId: number, data: object) => {\n    updateTodo(todoId, data)\n      .then(() => {\n        setTodos(todos.map(todo => {\n          if (todo.id !== todoId) {\n            return todo;\n          }\n\n          return {\n            ...todo,\n            ...data,\n          };\n        }));\n      })\n      .catch(() => {\n        addErrorMessage('Unable to update a todo');\n      });\n  };\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const numberOfCompletedTodos = todos\n    .filter((todo: Todo) => todo.completed).length;\n\n  const numberOfActiveTodos = todos\n    .filter((todo: Todo) => !todo.completed).length;\n\n  const isAllCompleted = useMemo(\n    () => numberOfCompletedTodos === todos.length,\n    [numberOfCompletedTodos],\n  );\n\n  const toggleAllTodos = () => {\n    Promise.all(todos\n      .filter(todo => todo.completed === isAllCompleted)\n      .map(todo => {\n        return updateTodo(todo.id, { completed: !isAllCompleted })\n          .then(() => {\n            setTodos(todos.map(todoItem => {\n              return {\n                ...todoItem,\n                completed: !isAllCompleted,\n              };\n            }));\n          })\n          .catch(() => {\n            addErrorMessage('Unable to update a todo');\n          });\n      }));\n  };\n\n  return (\n    <>\n      <div className=\"todoapp\">\n        <Header\n          addTodo={addTodo}\n          addErrorMessage={addErrorMessage}\n          setErrorText={setErrorText}\n        />\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            data-cy=\"toggleAll\"\n            checked={isAllCompleted}\n            onChange={toggleAllTodos}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <Routes>\n            <Route path=\"/\">\n              <Route\n                index\n                element={(\n                  <TodoList\n                    todos={todos}\n                    deleteTodo={deleteTodo}\n                    updateTodoData={updateTodoData}\n                  />\n                )}\n              />\n              <Route\n                path=\":filterOption\"\n                element={(\n                  <TodoList\n                    todos={todos}\n                    deleteTodo={deleteTodo}\n                    updateTodoData={updateTodoData}\n                  />\n                )}\n              />\n            </Route>\n          </Routes>\n        </section>\n\n        {todos.length > 0 && (\n          <Footer\n            numberOfActiveTodos={numberOfActiveTodos}\n            numberOfCompletedTodos={numberOfCompletedTodos}\n            todos={todos}\n            deleteTodo={deleteTodo}\n          />\n        )}\n      </div>\n\n      {errorText.length > 0 && (\n        <ErrorNotification\n          errorText={errorText}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\nimport './styles/auth-form.css';\n\nimport App from './App';\nimport { AuthProvider } from './components/Auth/AuthContext';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <AuthProvider>\n        <App />\n      </AuthProvider>\n    </Router>,\n  );\n"],"sourceRoot":""}